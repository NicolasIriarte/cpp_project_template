name: CMake Build Matrix

on: [push, pull_request]

jobs:
  
  build:
    
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: ubuntu-latest
            name: Ubuntu GCC
            compiler: gcc
          - os: ubuntu-latest
            name: Ubuntu Clang
            compiler: clang
          - os: macos-latest
            name: MacOS Clang
            compiler: clang
          - os: windows-latest
            name: Windows MSVC
            compiler: cl
          - os: windows-latest
            name: Windows MinGW
            compiler: gcc
            extra-cmake-args: '-G "MinGW Makefiles"'          
        build_type: [Debug, Release]
    
    name: ${{ matrix.config.name }} - ${{ matrix.build_type }}
    
    runs-on: ${{ matrix.config.os }}

    steps:
      - name: Checkout project
        uses: actions/checkout@v2

      - name: Set up Python 3.x
        uses: actions/setup-python@v1
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install conan cmake
          
      - name: Preconfigure
        shell: python
        run: |
          if "${{ matrix.config.compiler }}" == "cl":
            print("::set-env name=CC::cl")
            print("::set-env name=CXX::cl")
          elif "${{ matrix.config.compiler }}" == "clang":
            print("::set-env name=CC::clang")
            print("::set-env name=CXX::clang++")
          else: # gcc
            print("::set-env name=CC::gcc")
            print("::set-env name=CXX::g++")
        
      - name: Configure
        run: cmake ${{ extra-cmake-args }} -S . -B build -D CMAKE_BUILD_TYPE=${{ matrix.build_type }}      

      - name: Build
        run: cmake --build build --config ${{ matrix.build_type }}

      - name: Run tests
        working-directory: build
        run: ctest

      - name: Install Strip
        run: cmake --install build --prefix instdir --strip

      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          path: ./instdir
          name: ${{ matrix.os }}-${{ matrix.build_type }}

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Store Release url
        run: |
          echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

      - uses: actions/upload-artifact@v1
        with:
          path: ./upload_url
          name: upload_url

  publish:
    if: contains(github.ref, 'tags/v')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        build_type: [Debug, Release]
    needs: release
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v1
        with:
          name: ${{ matrix.os }}-${{ matrix.build_type }}
          path: ./

      - name: Download URL
        uses: actions/download-artifact@v1
        with:
          name: upload_url
          path: ./
      - id: set_upload_url
        run: |
          upload_url=`cat ./upload_url`
          echo ::set-output name=upload_url::$upload_url

      - name: Upload to Release
        id: upload_to_release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
          asset_path: ./${{ matrix.os }}-${{ matrix.build_type }}
          asset_name: ${{ matrix.os }}-${{ matrix.build_type }}
          asset_content_type: application/x-gtar
